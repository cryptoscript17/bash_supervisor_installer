import os, json, time
import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher.handler import CancelHandler

from datetime import datetime, timedelta
#import asyncio
import yaml

from get_documents_csv import (get_bdate_edate_today,
                               get_semos_document)

from semos_template_to_xlsx import (convert_semos_template_csv,
                                    converted_template_to_xlsx)

from _gis_get_devices import (request_devices_dataset_json,
                                convert_devices_dataset_json_to_xlsx,
                                get_dataset_xlsx_path_local,
                                get_device_snum_by_name,
                                get_device_id_by_name,
                                request_device_sensors_dataset_json,
                                convert_device_sensors_json_to_xlsx,
                                get_device_sensor_ids_list,
                                request_device_sensor_values_json,
                                get_latest_dataset_xlsx_path_local,
                                get_snum_by_device_id,
                                get_device_id_by_snum)

from _get_device_sensors_history import (gis_get_history,
                                        request_devices_sample_dataset,
                                        save_devices_sample_dataset_xlsx)
from mineco_public import (save_admin_devices_table,
                            save_admin_table_pdk_json,
                            parse_admin_pdk_to_string,
                            get_rnox_is_work)

from rgis_requests import (insert_device_sensors_data,
                           check_operation_in_progress,
                           return_datetime_string,
                           over_pdk_data_json_to_telegram_text,
                           select_device_ids,
                           get_file_minutes_age)

# Configure logging
logging.basicConfig(level=logging.INFO)

workdir = os.path.dirname(os.path.abspath(os.path.realpath(__file__)))
config_path = os.path.join(workdir, 'asyncio_gis_bot.yml')

with open(config_path, 'rb') as f:
    config = yaml.safe_load(f)

tg_token = config["tg_token"]

# initialize bot and dispatcher
bot = Bot(token=tg_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# define states for the conversation flow
class RegistryQueryStates(StatesGroup):
    waiting_for_dates = State()
    waiting_for_device_name = State()
    waiting_for_snum = State()
    waiting_semos_report_date = State()
    waiting_semos_upload = State()


# —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö user_id
'''
–ú–∞–ª–∞—â—É–∫ –ö;213556354
–ë–∞–ª–∞–≥—ë–∑—è–Ω –í;@Moem_it;873769825
–ó—É–±–∫–æ–≤ –ï;@cryptoscript17;606301502
–ì–æ–ª—å—Ü–æ–≤ –ê;1015801463
–§—ë–¥–æ—Ä–æ–≤ –ê;@AlexanderF1977;1036226946
–ö–∞–ª—é–∂–Ω—ã–π –ê;@anton_jet1;1627515798
–î–æ–æ—Å –ö;@DoosKM;979838445
–ö–æ–∑—ã—Ä–µ–≤–∞ –Æ;@Jkozyreva;993653171
–ª–µ –ê–ª–µ–∫—Å–µ–π;274785203
–†–æ–≥–æ–≤–∞ –¢;@bangro_ws;732415610
–ë–∞–π–º–∞—á–µ–≤–∞ –ö;@kibiiim;605595425
–ö–∞—Ç–µ—Ä–∏–Ω–∞;@katerinkaa16;404067938
–†–æ–¥–∏–æ–Ω–æ–≤ –í;1785253081
–Æ–ª—è;@whoisyu1;766176122
Aik;@Budilnik01;1028586520
Irina;7607841641
'''
#   ALLOWED_USERS = [213556354,606301502,1939135390,873769825,993653171,979838445,1036226946,732415610,480720006,736471511,793998044,1015801463,1405432689,1627515798,391726088,5553713408,605595425,1785253081,782123706,274785203]
#   ALLOWED_USERS = [,,,,,,,,,,,,,,480720006,793998044,1028586520]
ALLOWED_USERS = [213556354,873769825,606301502,1015801463,1036226946,1627515798,979838445,993653171,274785203,732415610,605595425,404067938,1785253081,766176122,1028586520,7607841641]

def restrict_access(func):
    async def wrapper_restricted(message: types.Message):
        user_id = message.from_user.id
        if user_id not in ALLOWED_USERS:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ @cryptoscript17")
            raise CancelHandler()
        return await func(message)

    return wrapper_restricted




async def main_menu(message):
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton("üîå –†-–ù–û–ö–°"),
               types.KeyboardButton("‚ò†Ô∏è –†–ì–ò–° –ü–î–ö"),
               types.KeyboardButton("‚ò†Ô∏è –ü–£–ë–õ–ò–ß–ö–ê"),
               types.KeyboardButton("üïó –†–û–°–ì–ò–î–†–û–ú–ï–¢"),
               types.KeyboardButton("üíæ –†–µ–µ—Å—Ç—Ä –ø–æ—Å—Ç–æ–≤"),
               types.KeyboardButton("üíæ –†–µ–µ—Å—Ç—Ä –ø–æ–∫–∞–∑–∞–Ω–∏–π"),
               types.KeyboardButton("üîç –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞"),
               types.KeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—ç–º–ø–ª"),
               types.KeyboardButton("üìã –°–∫–∞–Ω–µ—Ä —Å–µ–Ω—Å–æ—Ä–æ–≤")]
    keyboard_markup.add(*buttons)
    await message.reply("üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard_markup)

async def nav_buttons(message, context):
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton("üîô –ù–∞–∑–∞–¥"),
               types.KeyboardButton("üîö –°—Ç–æ–ø")]
    keyboard_markup.add(*buttons)
    await message.reply(f"{context}", reply_markup=keyboard_markup)


#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /start
@dp.message_handler(CommandStart())
@restrict_access
async def send_welcome(message: types.Message):
    await main_menu(message)



#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "üîå –†-–ù–û–ö–°" button is pressed
#
#
@dp.message_handler(lambda message: message.text == "üîå –†-–ù–û–ö–°")
@restrict_access
async def get_devices_registry(message: types.Message):
    await bot.send_chat_action(chat_id=message.chat.id, action=types.ChatActions.TYPING)
    rnox_json = await get_rnox_is_work()
    if 'status_code' not in rnox_json:
        text = f"\n‚úîÔ∏è –ü–æ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç [{len(rnox_json['true'])}]:\n{', '.join(x for x in rnox_json['true'])}\n‚ùå –ü–æ—Å—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç [{len(rnox_json['false'])}]:\n{', '.join(x for x in rnox_json['false'])}\n‚ùì –ü–æ—Å—Ç—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç [{len(rnox_json['empty'])}]:\n{', '.join(x for x in rnox_json['empty'])}"
    else:
        text = f"–û—à–∏–±–∫–∞! –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {rnox_json['status_code']}"
    await message.reply(text)


#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "üïó –†–û–°–ì–ò–î–†–û–ú–ï–¢" button is pressed
#
#
@dp.message_handler(lambda message: message.text == "üïó –†–û–°–ì–ò–î–†–û–ú–ï–¢")
@restrict_access
async def get_devices_registry(message: types.Message):
    await bot.send_chat_action(chat_id=message.chat.id, action=types.ChatActions.TYPING)
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton("–°–µ–≥–æ–¥–Ω—è"),
               types.KeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV"),
               types.KeyboardButton("–û—Ç–º–µ–Ω–∞")]
    keyboard_markup.add(*buttons)
    await message.reply(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-mm-dd\n–ù–∞–ø—Ä–∏–º–µ—Ä 2023-05-30\n\n–û—Ç—á—ë—Ç –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É!", reply_markup=keyboard_markup)
    await RegistryQueryStates.waiting_semos_report_date.set()

#   –ü–†–ò–ù–ò–ú–ê–Æ–©–ê–Ø –ê–†–ì–£–ú–ï–ù–¢ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–ö–ò "üïó –†–û–°–ì–ò–î–†–û–ú–ï–¢"
@dp.message_handler(lambda message: message.text != "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV", state=RegistryQueryStates.waiting_semos_report_date)
async def get_history_query(message: types.Message, state: FSMContext):
    is_file_sended = False
    if message.text == '–°–µ–≥–æ–¥–Ω—è':
        (bdate, edate) = get_bdate_edate_today()
        await message.reply(text=f'{bdate} - {edate}', reply_markup=types.ReplyKeyboardRemove())
        template_cp1251_path = await get_semos_document(bdate, edate)
        logging.info(f'Template path: {template_cp1251_path[0]}')
        if len(template_cp1251_path) > 0:
            dataset_path = convert_semos_template_csv(template_cp1251_path[0])
            logging.info(f'convert_semos_template_csv: {dataset_path}')
            if os.path.isfile(dataset_path):
                logging.info(f'–ù–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç: {dataset_path}')
                result_xlsx_path = converted_template_to_xlsx(dataset_path)
                logging.info(f'XLSX –¥–∞—Ç–∞—Å–µ—Ç: {result_xlsx_path}')
            else:
                logging.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É')
                result_xlsx_path = 'NA'
            if result_xlsx_path != 'NA':
                text = f"–§–∞–π–ª '{os.path.basename(template_cp1251_path[0])}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!"
                if os.path.isfile(result_xlsx_path):
                    with open(result_xlsx_path, "rb") as outfile:
                        if await bot.send_document(message.chat.id, outfile, caption=text):
                            is_file_sended = True
                else:
                    text = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É!'
            else:
                text = f'–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ {os.path.basename(template_cp1251_path[0])} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π!'
        else:
            text = '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –°–≠–ú–û–° –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –æ—à–∏–±–∫–æ–π.\n–í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ...'
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        text = '–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.\n–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.'

    else:
        #regex = r'^(\d{4})[-/](\d{1,2})[-/](\d{1,2})$'
        regex = r'\d{4}[-/.]\d{2}[-/.]\d{2}'
        if re.match(regex, message.text):
            text = "–î–∞—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É YYYY-mm-dd"
            matches = re.search(r'^(\d{4})[-/](\d{1,2})[-/](\d{1,2})$', message.text)

            #   –ø–æ–ª—É—á–∞–µ–º bdate, edate
            edate = f'{matches.group(1)}-{matches.group(2)}-{matches.group(3)} 08:00'
            edate = f'{matches.group(3)}.{matches.group(2)}.{matches.group(1)} 08:00'
            edate_timestamp_obj = datetime.strptime(edate, '%d.%m.%Y %H:%M')

            bdate_timestamp_obj = edate_timestamp_obj - timedelta(days=1)
            bdate = bdate_timestamp_obj.strftime('%d.%m.%Y %H:%M')
            text += f'\n{bdate} - {edate}'

            template_cp1251_path = await get_semos_document(bdate, edate)
            logging.info(f'Template path: {template_cp1251_path}')
            if len(template_cp1251_path) > 0:
                dataset_path = convert_semos_template_csv(template_cp1251_path[0])
                logging.info(f'convert_semos_template_csv: {dataset_path}')
                if os.path.isfile(dataset_path):
                    logging.info(f'–ù–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç: {dataset_path}')
                    result_xlsx_path = converted_template_to_xlsx(dataset_path)
                    logging.info(f'XLSX –¥–∞—Ç–∞—Å–µ—Ç: {result_xlsx_path}')
                else:
                    logging.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É')
                    result_xlsx_path = 'NA'
                if result_xlsx_path != 'NA':
                    text = f"–§–∞–π–ª '{os.path.basename(template_cp1251_path[0])}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!"
                    if os.path.isfile(result_xlsx_path):
                        with open(result_xlsx_path, "rb") as outfile:
                            if await bot.send_document(message.chat.id, outfile, caption=text):
                                is_file_sended = True
                    else:
                        text = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É!'
                else:
                    text = f'–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ {os.path.basename(template_cp1251_path[0])} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π!'
            else:
                text = '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –°–≠–ú–û–° –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –æ—à–∏–±–∫–æ–π.\n–í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ...'


        else:
            text = "–î–∞—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É YYYY-mm-dd"
    if not is_file_sended:
        await message.reply(text=text, reply_markup=types.ReplyKeyboardRemove())
    await state.finish()


@dp.message_handler(lambda message: message.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV", state=RegistryQueryStates.waiting_semos_report_date)
async def get_history_query(message: types.Message, state: FSMContext):
    await message.answer(text='–û–∂–∏–¥–∞—é –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –°–≠–ú–û–°.', reply_markup=types.ReplyKeyboardRemove())
    await RegistryQueryStates.waiting_semos_upload.set()

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
@dp.message_handler(content_types=['document'], state=RegistryQueryStates.waiting_semos_upload)
async def process_file(message: types.Message, state: FSMContext):
    if message.text == 'stop':
        await state.finish()
    document = message.document
    logging.info(f'document: {document}')
    if document.mime_type == 'text/csv':
        logging.info(f'file: {document}')
        download_path = os.path.join(workdir, f"{datetime.now().strftime('%Y_%m_%d_%H_%M_%S')}_{document.file_name}")
        with open(document.file_name, 'wb') as f:
            await message.document.download(destination_file=download_path)
        dataset_path = convert_semos_template_csv(download_path)
        logging.info(f'convert_semos_template_csv: {dataset_path}')
        if os.path.isfile(dataset_path):
            logging.info(f'–ù–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç: {dataset_path}')
            result_xlsx_path = converted_template_to_xlsx(dataset_path)
            logging.info(f'XLSX –¥–∞—Ç–∞—Å–µ—Ç: {result_xlsx_path}')
        else:
            logging.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É')
            result_xlsx_path = 'NA'
        if result_xlsx_path != 'NA':
            text = f"–§–∞–π–ª '{document.file_name}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!"
            if os.path.isfile(result_xlsx_path):
                with open(result_xlsx_path, "rb") as outfile:
                    await bot.send_document(message.chat.id, outfile)
            else:
                text = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É!'
        else:
            text = f'–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ {document.file_name} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π!'
    else:
        text = f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ {document.mime_type} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 'text/csv'"
    await bot.send_message(chat_id=message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())
    await state.finish()




#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "‚ò†Ô∏è –†–ì–ò–° –ü–î–ö" button is pressed
#
#
@dp.message_handler(lambda message: message.text == "‚ò†Ô∏è –†–ì–ò–° –ü–î–ö")
@restrict_access
async def get_devices_registry(message: types.Message):
    await bot.send_chat_action(chat_id=message.chat.id, action=types.ChatActions.TYPING)
    table_pdk = parse_admin_pdk_to_string(True)

    if table_pdk[0]:
        if len(table_pdk[1]) > 3300:
            sered = table_pdk[1].find('\n', 3200)
            table_first = table_pdk[1][0:sered-1]
            table_second = table_pdk[1][sered:len(table_pdk[1])]
            await message.reply(f'üí• –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è—Ö –ü–î–ö—Å—Å –∏–∑ –∞–¥–º–∏–Ω–∫–∏ –†–ì–ò–°:\n{table_first}')
            await message.reply(f'{table_second}')
        else:
            await message.reply(f'üí• –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è—Ö –ü–î–ö—Å—Å –∏–∑ –∞–¥–º–∏–Ω–∫–∏ –†–ì–ò–°:\n{table_pdk[1]}')
    else:
        await message.reply(f'‚ùó –û—à–∏–±–∫–∞! –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –†–ì–ò–° –Ω–µ —É–≤–µ–Ω—á–∞–ª–æ—Å—å —É—Å–ø–µ—Ö–æ–º.\n{table_pdk[1]}')



#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "‚ò†Ô∏è –ü–£–ë–õ–ò–ß–ö–ê" button is pressed
#
#
@dp.message_handler(lambda message: message.text == "‚ò†Ô∏è –ü–£–ë–õ–ò–ß–ö–ê")
@restrict_access
async def get_devices_registry(message: types.Message):
    await bot.send_chat_action(chat_id=message.chat.id, action=types.ChatActions.TYPING)
    device_ids = select_device_ids()

    # status_file_path = os.path.join(workdir, 'operation_status.txt')
    over_pdk_data_json_path = os.path.join(workdir, '_over_pdk_data_json.txt')
    if os.path.exists(over_pdk_data_json_path):
        # if get_file_minutes_age(over_pdk_data_json_path) > 5:
        os.remove(over_pdk_data_json_path)
    # with open(status_file_path, "w") as outfile:
    #    outfile.write('+')
    bot_msg = await bot.send_message(chat_id=message.chat.id, text=f"‚åõ Scanning [{len(device_ids)}] devices. Please wait for 2-3 minutes..")

    msg = f'üí• –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è—Ö –ü–î–ö—Å—Å –∏–∑ –ø—É–±–ª–∏—á–∫–∏ –†–ì–ò–°:\n'
    msg += f"{return_datetime_string()}\n"

    fpath = insert_device_sensors_data([message.chat.id], True)
    if os.path.exists(fpath):
        msg += over_pdk_data_json_to_telegram_text(fpath)
    else:
        msg = 'Not found. Wait 5 minutes and try again...'
    # bot_msg = await bot.send_message(chat_id=message.chat.id, text=msg)
    await bot_msg.edit_text(msg)

#   –ü–†–ò–ù–ò–ú–ê–Æ–©–ê–Ø –ê–†–ì–£–ú–ï–ù–¢ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–ö–ò "üíæ –†–µ–µ—Å—Ç—Ä –ø–æ—Å—Ç–æ–≤"
@dp.message_handler(lambda message: message.text == "üíæ –†–µ–µ—Å—Ç—Ä –ø–æ—Å—Ç–æ–≤")
@restrict_access
async def get_devices_registry(message: types.Message):
    #dataset_xlsx_path = get_dataset_xlsx_path_local()
    #if len(dataset_xlsx_path) < 1:
    await bot.send_chat_action(chat_id=message.chat.id, action=types.ChatActions.TYPING)
    dataset_json_path = request_devices_dataset_json()
    dataset_xlsx_path = convert_devices_dataset_json_to_xlsx(dataset_json_path)
    if os.path.exists(dataset_xlsx_path):
        with open(dataset_xlsx_path, 'rb') as file:
            await message.reply_document(file, caption='üìã –†–µ–µ—Å—Ç—Ä –ø–æ—Å—Ç–æ–≤ –ì–ò–°.')
    else:
        await message.reply('‚ùó –û—à–∏–±–∫–∞! –§–∞–π–ª XLSX –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!')

#   –ü–†–ò–ù–ò–ú–ê–Æ–©–ê–Ø –ê–†–ì–£–ú–ï–ù–¢ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–ö–ò "üìã –°–∫–∞–Ω–µ—Ä —Å–µ–Ω—Å–æ—Ä–æ–≤"
@dp.message_handler(lambda message: message.text == "üìã –°–∫–∞–Ω–µ—Ä —Å–µ–Ω—Å–æ—Ä–æ–≤")
@restrict_access
async def get_devices_sensors(message: types.Message):
    await bot.send_chat_action(chat_id=message.chat.id, action=types.ChatActions.TYPING)
    json_data = request_devices_sample_dataset()
    if json_data is not None:
        devices_sensors_xlsx = save_devices_sample_dataset_xlsx(json_data[1])
        if devices_sensors_xlsx is not None:
            if os.path.exists(devices_sensors_xlsx):
                with open(devices_sensors_xlsx, 'rb') as file:
                    if len(json_data[0]) > 0:
                        devices = f"\n–ü–æ—Å—Ç—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–∞: {','.join(str(x) for x in json_data[0])}"
                    else:
                        devices = '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤ –æ—Ç–≤–µ—Ç–µ.'
                    await message.reply_document(file, caption=f"üìã –í—ã–≥—Ä—É–∑–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–µ–Ω—Å–æ—Ä–æ–≤ ['CO', 'NO2', 'H2S', 'NH3', 'SO2'] –ø–æ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤ RNOX.{devices}")
            else:
                await message.reply('‚ùó –û—à–∏–±–∫–∞! –§–∞–π–ª XLSX –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!')
        else:
            await message.reply('‚ùó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ API.')
    else:
        await message.reply('‚ùó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API.')


#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "üíæ –†–µ–µ—Å—Ç—Ä –ø–æ–∫–∞–∑–∞–Ω–∏–π"
#
#
@dp.message_handler(lambda message: message.text == "üíæ –†–µ–µ—Å—Ç—Ä –ø–æ–∫–∞–∑–∞–Ω–∏–π")
@restrict_access
async def get_history_registry(message: types.Message):
    context = "–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'ID|YYYY-MM-DD|YYYY-MM-DD'"
    await nav_buttons(message, context)
    await RegistryQueryStates.waiting_for_dates.set()

#   –ü–†–ò–ù–ò–ú–ê–Æ–©–ê–Ø –ê–†–ì–£–ú–ï–ù–¢ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–ö–ò "üíæ –†–µ–µ—Å—Ç—Ä –ø–æ–∫–∞–∑–∞–Ω–∏–π"

@dp.message_handler(lambda message: message.text != "üîö –°—Ç–æ–ø", state=RegistryQueryStates.waiting_for_dates)
async def get_history_query(message: types.Message, state: FSMContext):
    await bot.send_chat_action(chat_id=message.chat.id, action=types.ChatActions.TYPING)
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await main_menu(message)
        await state.finish()
    else:
        dates_regex = r'^\d+\|\d{4}-\d{2}-\d{2}\|\d{4}-\d{2}-\d{2}'
        if not re.match(dates_regex, message.text):
            await message.reply("üòï –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.\n–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'ID|YYYY-MM-DD|YYYY-MM-DD'\n–ù–∞–ø—Ä–∏–º–µ—Ä: 139|2023-05-17|2023-05-18")
            return

        date_range = message.text.split('|')
        device_id = date_range[0]
        start_date = str(datetime.strptime(date_range[1], '%Y-%m-%d').strftime('%Y-%m-%dT%H:%M:%S'))
        #end_date = str(datetime.strptime(date_range[2], '%Y-%m-%d').strftime('%Y-%m-%dT%H:%M:%S'))
        end_date = str(datetime.strptime(date_range[2], '%Y-%m-%d').strftime('%Y-%m-%dT'))
        cur_time = datetime.now().strftime("%H:%M:%S")
        logging.info(f'bdate: {start_date}, edate: {end_date}, {type(start_date)}')

        dataset_xlsx_path = gis_get_history(start_date, f'{end_date}{cur_time}', device_id)  # call the function to get history registry
        if os.path.exists(dataset_xlsx_path):
            with open(dataset_xlsx_path, 'rb') as file:
                await message.reply_document(file, caption=f'üì° üíæ –†–µ–µ—Å—Ç—Ä –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø–æ—Å—Ç–∞ {device_id}.')
        else:
            await message.reply('‚ùó –û—à–∏–±–∫–∞! –§–∞–π–ª XLSX –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!')
        await state.finish()


#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "üîç –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞"
#
#
@dp.message_handler(lambda message: message.text == "üîç –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞")
@restrict_access
async def get_device_info_query(message: types.Message):
    keyboard_markup = types.ReplyKeyboardRemove()
    context = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ (–∫–∞–∫ –≤ –ì–ò–°):"
    await nav_buttons(message, context)
    #await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ (–∫–∞–∫ –≤ –ì–ò–°):", reply_markup=keyboard_markup)
    await RegistryQueryStates.waiting_for_device_name.set()

#   –ü–†–ò–ù–ò–ú–ê–Æ–©–ê–Ø –ê–†–ì–£–ú–ï–ù–¢ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–ö–ò "üîç –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞"
@dp.message_handler(lambda message: message.text != "üîö –°—Ç–æ–ø", state=RegistryQueryStates.waiting_for_device_name)
async def get_device_info(message: types.Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await main_menu(message)
        await state.finish()
    else:
        logging.info(len(message.text.split('-')))
        if len(message.text.split('-')) == 3:
            splitted_device_name = message.text.split('-')
            device_name = f'{splitted_device_name[0].capitalize()}-{splitted_device_name[1].capitalize()}-{splitted_device_name[2]}'
        elif len(message.text.split('-')) == 2:
            splitted_device_name = message.text.split('-')
            device_name = f'{splitted_device_name[0].capitalize()}-{splitted_device_name[1].capitalize()}'
        else:
            device_name = message.text.strip().capitalize()
        dataset_xlsx_path_local = get_dataset_xlsx_path_local()
        snum, device_id = get_device_snum_by_name(dataset_xlsx_path_local, device_name), get_device_id_by_name(dataset_xlsx_path_local, device_name)
        await message.reply(f'–ü–æ—Å—Ç: {device_name}\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞: {device_id}\n–ó–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä: {snum}')

        async with state.proxy() as data:
            data['device_name'] = device_name
            data['snum'] = snum
            data['device_id'] = device_id
            logging.info(f'waiting_for_device_name data: {data}')

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_info = [types.KeyboardButton('–°—ç–º–ø–ª'), types.KeyboardButton('–ë–ª–∏–∂–∞–π—à–∏–µ'), types.KeyboardButton('üîö –°—Ç–æ–ø')]
        markup.add(*btn_info)
        await message.answer(f"–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ—Å—Ç–æ–º: {message.text}", reply_markup=markup)
        #await state.finish()
        await RegistryQueryStates.waiting_for_snum.set()

#   –†–ê–°–®–ò–†–ï–ù–ù–û–ï –ú–ï–ù–Æ –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–°–¢–ï "üîç –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞" - "–°—ç–º–ø–ª"
#
#

#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "–°—ç–º–ø–ª"
@dp.message_handler(text="–°—ç–º–ø–ª", state=RegistryQueryStates.waiting_for_snum)
async def info_button_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        device_id = data['device_id']
        snum = data['snum']
        device_name = data['device_name']
    if str(device_id).isdigit():
        dataset_json_path = request_device_sensors_dataset_json(int(device_id))
        sensor_ids = get_device_sensor_ids_list(dataset_json_path)
        logging.info(f'sensors:  {sensor_ids}')
        sensors_dataset_path = request_device_sensor_values_json(sensor_ids)
        with open(sensors_dataset_path, newline='', encoding='utf-8') as json_file:
            json_text = ''.join(x for x in json_file.readlines())
            json_data = json.loads(json_text)
        table = []
        for item in json_data:
            values = list(item.values())
            table.append(' ‚ãÆ '.join(str(x) for x in values))
        table = '\n'.join(str(x) for x in table)
        bdate_raw = str(os.path.basename(sensors_dataset_path))[0:19]
        bdate = f'{bdate_raw[0:10].replace("_", "-")} {bdate_raw[11:19].replace("_", ":")}'
        await message.reply(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞: {device_name}\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞: {device_id}\n–ó–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä: {snum}\n–°–ø–∏—Å–æ–∫ —Å–µ–Ω—Å–æ—Ä–æ–≤: [{', '.join(str(x) for x in sensor_ids)}]\n–î–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä–æ–≤ –Ω–∞ ‚åö {bdate}:\n{table}", reply_markup=types.ReplyKeyboardRemove())
    else:
        logging.info(f'device_info sample data: {data}')
        await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=types.ReplyKeyboardRemove())
    await state.finish()



#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—ç–º–ø–ª"
#
#
@dp.message_handler(lambda message: message.text == "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—ç–º–ø–ª")
@restrict_access
async def get_last_sample_query(message: types.Message):
    context = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ANxxxx, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –ì–ò–°:\n–ù–∞–ø—Ä–∏–º–µ—Ä: AN0020, 137, –•–∏–º–∫–∏-5 (–≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑)"
    await nav_buttons(message, context)
    await RegistryQueryStates.waiting_for_snum.set()

#   –ü–†–ò–ù–ò–ú–ê–Æ–©–ê–Ø –ê–†–ì–£–ú–ï–ù–¢ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–ö–ò "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—ç–º–ø–ª"
@dp.message_handler(lambda message: message.text != "üîö –°—Ç–æ–ø", state=RegistryQueryStates.waiting_for_snum)
async def get_last_sample(message: types.Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await main_menu(message)
        await state.finish()
    else:
        async with state.proxy() as data:
            logging.info(f'waiting_for_snum data: {data}')
        if message.text.isdigit() and 1 <= int(message.text) <= 1000:
            dataset_xlsx_path = get_latest_dataset_xlsx_path_local()
            if len(dataset_xlsx_path) < 1:
                dataset_xlsx_path = convert_devices_dataset_json_to_xlsx(request_devices_dataset_json())

            snum = get_snum_by_device_id(dataset_xlsx_path, message.text)
            await message.reply(f"–ü–æ–ª—É—á–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞: {message.text}, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–≤–æ–¥—Å–∫–æ–º—É –Ω–æ–º–µ—Ä—É: {snum}")
        elif message.text.upper().startswith('AN'):
            dataset_xlsx_path = get_latest_dataset_xlsx_path_local()
            if len(dataset_xlsx_path) < 1:
                dataset_xlsx_path = convert_devices_dataset_json_to_xlsx(request_devices_dataset_json())
            device_id = get_device_id_by_snum(dataset_xlsx_path, message.text.upper())
            logging.info(f"dataset_xlsx_path: {dataset_xlsx_path}, device_id: {device_id}, snum: {message.text.upper()}")
            await message.reply(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞: {message.text.upper()}, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É: {device_id}")
        elif re.match('^[–∞-—è–ê-–Ø0-9]', message.text):
            dataset_xlsx_path = get_latest_dataset_xlsx_path_local()
            if len(dataset_xlsx_path) < 1:
                dataset_xlsx_path = convert_devices_dataset_json_to_xlsx(request_devices_dataset_json())
            device_id = get_device_id_by_name(dataset_xlsx_path, message.text)
            await message.reply(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞: {message.text}, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É: {device_id}")
        else:
            print("–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.")
            await message.reply("üòï –ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.")
            return

        if str(device_id).isdigit():
            dataset_json_path = request_device_sensors_dataset_json(int(device_id))
            sensor_ids = get_device_sensor_ids_list(dataset_json_path)
            logging.info(f'sensors:  {sensor_ids}')
            sensors_dataset_path = request_device_sensor_values_json(sensor_ids)
            with open(sensors_dataset_path, newline='', encoding='utf-8') as json_file:
                json_text = ''.join(x for x in json_file.readlines())
                json_data = json.loads(json_text)
            table = []
            for item in json_data:
                values = list(item.values())
                table.append(' ‚ãÆ '.join(str(x) for x in values))
            table = '\n'.join(str(x) for x in table)
            bdate_raw = str(os.path.basename(sensors_dataset_path))[0:19]
            bdate = f'{bdate_raw[0:10].replace("_", "-")} {bdate_raw[11:19].replace("_", ":")}'
            await message.reply(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞: {device_id}\n–°–ø–∏—Å–æ–∫ —Å–µ–Ω—Å–æ—Ä–æ–≤: [{', '.join(str(x) for x in sensor_ids)}]\n–î–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä–æ–≤ –Ω–∞ ‚åö {bdate}:\n{table}")
            await state.finish()
        else:
            await message.reply(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞: {device_id} —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É")
            return

#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "üîö –°—Ç–æ–ø"
#
#
@dp.message_handler(lambda message: message.text == "üîö –°—Ç–æ–ø", state='*')
async def stop_button_handler(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start", reply_markup=types.ReplyKeyboardRemove())
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)